import java.io.*;
import java.net.*;
import java.util.*;

public class ChatServer 
{
	
	private static final int porta = 4000;
	ServerSocket serverSocket;
	private final List<SocketCliente> usuarios = new LinkedList<>();
	
	public void iniciar() throws IOException
	{
		serverSocket = new ServerSocket(porta);
		
		System.out.println("-- Servidor em execução | Porta: " + porta + " --");
		System.out.println("********************************************\n");
		conexãoLoop();
	}
	
	private void conexãoLoop() throws IOException
	{
		while(true)
		{
			SocketCliente socketCliente = new SocketCliente(serverSocket.accept());
			usuarios.add(socketCliente);
						
			new Thread(() -> receberMensagemLoop(socketCliente)).start();
		}
	}
	
	private void receberMensagemLoop(SocketCliente socketCliente)
	{
		String msg;
		
		try
		{
			while ((msg = socketCliente.ReceberMensagem()) != null) 
			{
				if ("sair".equalsIgnoreCase(msg)) 
				{  return; }
				
				System.out.printf("%s - %s\n", socketCliente.getRemoteSocketAddress(), msg);
				DevolverMensagem(socketCliente, msg);
			}
		} 
		
		finally
		{ socketCliente.fechar();}
	}
	
	private void DevolverMensagem(SocketCliente emissor, String msg)
	{
		for (SocketCliente socketCliente : usuarios)
		{
			if (!emissor.equals(socketCliente))
			{
				socketCliente.EniviarMensagem(msg);				
			}
			
		}
	}
	
	
	
	
	public static void main(String[] args)
	{
		ChatServer servidor = new ChatServer();
		try 
		{
			servidor.iniciar();
		} 
		catch (IOException e) 
		{
			e.printStackTrace();
		}
		
		System.out.println("-- Servidor encerrado --");
	}
	
}
